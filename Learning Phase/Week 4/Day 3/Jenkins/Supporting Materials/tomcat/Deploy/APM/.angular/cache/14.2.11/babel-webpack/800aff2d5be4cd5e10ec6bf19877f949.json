{"ast":null,"code":"import { FormGroup } from '@angular/forms'; // Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\n// NOTE: This validator does NOT support validation of controls or groups within a FormArray.\n\nexport class GenericValidator {\n  // Provide the set of valid validation messages\n  // Stucture:\n  // controlName1: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // },\n  // controlName2: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // }\n  constructor(validationMessages) {\n    this.validationMessages = validationMessages;\n  } // Processes each control within a FormGroup\n  // And returns a set of validation messages to display\n  // Structure\n  // controlName1: 'Validation Message.',\n  // controlName2: 'Validation Message.'\n\n\n  processMessages(container) {\n    const messages = {};\n\n    for (const controlKey in container.controls) {\n      if (container.controls.hasOwnProperty(controlKey)) {\n        const c = container.controls[controlKey]; // If it is a FormGroup, process its child controls.\n\n        if (c instanceof FormGroup) {\n          const childMessages = this.processMessages(c);\n          Object.assign(messages, childMessages);\n        } else {\n          // Only validate if there are validation messages for the control\n          if (this.validationMessages[controlKey]) {\n            messages[controlKey] = '';\n\n            if ((c.dirty || c.touched) && c.errors) {\n              Object.keys(c.errors).map(messageKey => {\n                if (this.validationMessages[controlKey][messageKey]) {\n                  messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return messages;\n  }\n\n  getErrorCount(container) {\n    let errorCount = 0;\n\n    for (const controlKey in container.controls) {\n      if (container.controls.hasOwnProperty(controlKey)) {\n        if (container.controls[controlKey].errors) {\n          errorCount += Object.keys(container.controls[controlKey].errors).length;\n          console.log(errorCount);\n        }\n      }\n    }\n\n    return errorCount;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}