{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http) {\n      this.http = http;\n      this.productsUrl = 'api/products';\n    }\n\n    getProducts() {\n      return this.http.get(this.productsUrl).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n    }\n\n    getProduct(id) {\n      if (id === 0) {\n        return of(this.initializeProduct());\n      }\n\n      const url = `${this.productsUrl}/${id}`;\n      return this.http.get(url).pipe(tap(data => console.log('getProduct: ' + JSON.stringify(data))), catchError(this.handleError));\n    }\n\n    createProduct(product) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      product.id = null;\n      return this.http.post(this.productsUrl, product, {\n        headers\n      }).pipe(tap(data => console.log('createProduct: ' + JSON.stringify(data))), catchError(this.handleError));\n    }\n\n    deleteProduct(id) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      const url = `${this.productsUrl}/${id}`;\n      return this.http.delete(url, {\n        headers\n      }).pipe(tap(data => console.log('deleteProduct: ' + id)), catchError(this.handleError));\n    }\n\n    updateProduct(product) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      const url = `${this.productsUrl}/${product.id}`;\n      return this.http.put(url, product, {\n        headers\n      }).pipe(tap(() => console.log('updateProduct: ' + product.id)), // Return the product on an update\n      map(() => product), catchError(this.handleError));\n    }\n\n    handleError(err) {\n      // in a real world app, we may send the server to some remote logging infrastructure\n      // instead of just logging it to the console\n      let errorMessage;\n\n      if (err.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${err.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n      }\n\n      console.error(err);\n      return throwError(errorMessage);\n    }\n\n    initializeProduct() {\n      // Return an initialized object\n      return {\n        id: 0,\n        productName: null,\n        productCode: null,\n        tags: [''],\n        releaseDate: null,\n        price: null,\n        description: null,\n        starRating: null,\n        imageUrl: null\n      };\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}