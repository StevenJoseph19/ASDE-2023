{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './interfaces';\nimport * as ɵngcc2 from '@angular/common/http';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpHeaders, HttpParams, HttpResponse, HttpXhrBackend, XhrFactory } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { STATUS } from './http-status-codes';\nimport { InMemoryBackendConfig, InMemoryBackendConfigArgs, InMemoryDbService } from './interfaces';\nimport { BackendService } from './backend.service';\n/**\n * For Angular `HttpClient` simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService`.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n *\n * ### Usage\n *\n * Create an in-memory data store class that implements `InMemoryDbService`.\n * Call `config` static method with this service class and optional configuration object:\n * ```\n * // other imports\n * import { HttpClientModule } from '@angular/common/http';\n * import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\n *\n * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\n * @NgModule({\n *  imports: [\n *    HttpModule,\n *    HttpClientInMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\n *    ...\n *  ],\n *  ...\n * })\n * export class AppModule { ... }\n * ```\n */\n\nvar HttpClientBackendService =\n/** @class */\nfunction (_super) {\n  __extends(HttpClientBackendService, _super);\n\n  function HttpClientBackendService(inMemDbService, config, xhrFactory) {\n    var _this = _super.call(this, inMemDbService, config) || this;\n\n    _this.xhrFactory = xhrFactory;\n    return _this;\n  }\n\n  HttpClientBackendService.prototype.handle = function (req) {\n    try {\n      return this.handleRequest(req);\n    } catch (error) {\n      var err = error.message || error;\n      var resOptions_1 = this.createErrorResponseOptions(req.url, STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\n      return this.createResponse$(function () {\n        return resOptions_1;\n      });\n    }\n  }; ////  protected overrides /////\n\n\n  HttpClientBackendService.prototype.getJsonBody = function (req) {\n    return req.body;\n  };\n\n  HttpClientBackendService.prototype.getRequestMethod = function (req) {\n    return (req.method || 'get').toLowerCase();\n  };\n\n  HttpClientBackendService.prototype.createHeaders = function (headers) {\n    return new HttpHeaders(headers);\n  };\n\n  HttpClientBackendService.prototype.createQueryMap = function (search) {\n    var map = new Map();\n\n    if (search) {\n      var params_1 = new HttpParams({\n        fromString: search\n      });\n      params_1.keys().forEach(function (p) {\n        return map.set(p, params_1.getAll(p));\n      });\n    }\n\n    return map;\n  };\n\n  HttpClientBackendService.prototype.createResponse$fromResponseOptions$ = function (resOptions$) {\n    return resOptions$.pipe(map(function (opts) {\n      return new HttpResponse(opts);\n    }));\n  };\n\n  HttpClientBackendService.prototype.createPassThruBackend = function () {\n    try {\n      return new HttpXhrBackend(this.xhrFactory);\n    } catch (ex) {\n      ex.message = 'Cannot create passThru404 backend; ' + (ex.message || '');\n      throw ex;\n    }\n  };\n\n  HttpClientBackendService = __decorate([__param(1, Inject(InMemoryBackendConfig)), __param(1, Optional()), __metadata(\"design:paramtypes\", [InMemoryDbService, InMemoryBackendConfigArgs, XhrFactory])], HttpClientBackendService);\n\n  HttpClientBackendService.ɵfac = function HttpClientBackendService_Factory(t) {\n    return new (t || HttpClientBackendService)(ɵngcc0.ɵɵinject(ɵngcc1.InMemoryDbService), ɵngcc0.ɵɵinject(InMemoryBackendConfig, 8), ɵngcc0.ɵɵinject(ɵngcc2.XhrFactory));\n  };\n\n  HttpClientBackendService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: HttpClientBackendService,\n    factory: function (t) {\n      return HttpClientBackendService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return HttpClientBackendService;\n}(BackendService);\n\nexport { HttpClientBackendService }; //# sourceMappingURL=http-client-backend.service.js.map","map":null,"metadata":{},"sourceType":"module"}