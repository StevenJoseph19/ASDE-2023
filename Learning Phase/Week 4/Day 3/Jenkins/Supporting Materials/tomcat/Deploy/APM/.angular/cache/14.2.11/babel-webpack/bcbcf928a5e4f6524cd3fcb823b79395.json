{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Injectable } from '@angular/core';\n/**\n* Interface for a class that creates an in-memory database\n*\n* Its `createDb` method creates a hash of named collections that represents the database\n*\n* For maximum flexibility, the service may define HTTP method overrides.\n* Such methods must match the spelling of an HTTP method in lower case (e.g, \"get\").\n* If a request has a matching method, it will be called as in\n* `get(info: requestInfo, db: {})` where `db` is the database object described above.\n*/\n\nvar InMemoryDbService =\n/** @class */\nfunction () {\n  function InMemoryDbService() {}\n\n  return InMemoryDbService;\n}();\n\nexport { InMemoryDbService };\n/**\n* Interface for InMemoryBackend configuration options\n*/\n\nvar InMemoryBackendConfigArgs =\n/** @class */\nfunction () {\n  function InMemoryBackendConfigArgs() {}\n\n  return InMemoryBackendConfigArgs;\n}();\n\nexport { InMemoryBackendConfigArgs }; /////////////////////////////////\n\n/**\n*  InMemoryBackendService configuration options\n*  Usage:\n*    InMemoryWebApiModule.forRoot(InMemHeroService, {delay: 600})\n*\n*  or if providing separately:\n*    provide(InMemoryBackendConfig, {useValue: {delay: 600}}),\n*/\n\nvar InMemoryBackendConfig =\n/** @class */\nfunction () {\n  function InMemoryBackendConfig(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    Object.assign(this, {\n      // default config:\n      caseSensitiveSearch: false,\n      dataEncapsulation: false,\n      delay: 500,\n      delete404: false,\n      passThruUnknownUrl: false,\n      post204: true,\n      post409: false,\n      put204: true,\n      put404: false,\n      apiBase: undefined,\n      host: undefined,\n      rootPath: undefined // default value is actually set in InMemoryBackendService ctor\n\n    }, config);\n  }\n\n  InMemoryBackendConfig = __decorate([__metadata(\"design:paramtypes\", [InMemoryBackendConfigArgs])], InMemoryBackendConfig);\n\n  InMemoryBackendConfig.ɵfac = function InMemoryBackendConfig_Factory(t) {\n    return new (t || InMemoryBackendConfig)(ɵngcc0.ɵɵinject(InMemoryBackendConfigArgs));\n  };\n\n  InMemoryBackendConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: InMemoryBackendConfig,\n    factory: function (t) {\n      return InMemoryBackendConfig.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return InMemoryBackendConfig;\n}();\n\nexport { InMemoryBackendConfig };\n/** Return information (UriInfo) about a URI  */\n\nexport function parseUri(str) {\n  // Adapted from parseuri package - http://blog.stevenlevithan.com/archives/parseuri\n  // tslint:disable-next-line:max-line-length\n  var URL_REGEX = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n  var m = URL_REGEX.exec(str);\n  var uri = {\n    source: '',\n    protocol: '',\n    authority: '',\n    userInfo: '',\n    user: '',\n    password: '',\n    host: '',\n    port: '',\n    relative: '',\n    path: '',\n    directory: '',\n    file: '',\n    query: '',\n    anchor: ''\n  };\n  var keys = Object.keys(uri);\n  var i = keys.length;\n\n  while (i--) {\n    uri[keys[i]] = m[i] || '';\n  }\n\n  return uri;\n}\nexport function removeTrailingSlash(path) {\n  return path.replace(/\\/$/, '');\n} //# sourceMappingURL=interfaces.js.map","map":null,"metadata":{},"sourceType":"module"}