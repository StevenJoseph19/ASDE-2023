{"ast":null,"code":"import { Observable, BehaviorSubject, of, from } from 'rxjs';\nimport { concatMap, first } from 'rxjs/operators';\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\nimport { delayResponse } from './delay-response';\nimport { InMemoryBackendConfig, parseUri, removeTrailingSlash } from './interfaces';\n/**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\n\nvar BackendService =\n/** @class */\nfunction () {\n  function BackendService(inMemDbService, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this.inMemDbService = inMemDbService;\n    this.config = new InMemoryBackendConfig();\n    this.requestInfoUtils = this.getRequestInfoUtils();\n    var loc = this.getLocation('/');\n    this.config.host = loc.host; // default to app web server host\n\n    this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\n\n    Object.assign(this.config, config);\n  }\n\n  Object.defineProperty(BackendService.prototype, \"dbReady\", {\n    ////  protected /////\n    get: function () {\n      if (!this.dbReadySubject) {\n        // first time the service is called.\n        this.dbReadySubject = new BehaviorSubject(false);\n        this.resetDb();\n      }\n\n      return this.dbReadySubject.asObservable().pipe(first(function (r) {\n        return r;\n      }));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Process Request and return an Observable of Http Response object\n   * in the manner of a RESTy web api.\n   *\n   * Expect URI pattern in the form :base/:collectionName/:id?\n   * Examples:\n   *   // for store with a 'customers' collection\n   *   GET api/customers          // all customers\n   *   GET api/customers/42       // the character with id=42\n   *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n   *   GET api/customers.json/42  // ignores the \".json\"\n   *\n   * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n   * Examples:\n   *     POST commands/resetDb,\n   *     GET/POST commands/config - get or (re)set the config\n   *\n   *   HTTP overrides:\n   *     If the injected inMemDbService defines an HTTP method (lowercase)\n   *     The request is forwarded to that method as in\n   *     `inMemDbService.get(requestInfo)`\n   *     which must return either an Observable of the response type\n   *     for this http library or null|undefined (which means \"keep processing\").\n   */\n\n  BackendService.prototype.handleRequest = function (req) {\n    var _this = this; //  handle the request when there is an in-memory database\n\n\n    return this.dbReady.pipe(concatMap(function () {\n      return _this.handleRequest_(req);\n    }));\n  };\n\n  BackendService.prototype.handleRequest_ = function (req) {\n    var _this = this;\n\n    var url = req.urlWithParams ? req.urlWithParams : req.url; // Try override parser\n    // If no override parser or it returns nothing, use default parser\n\n    var parser = this.bind('parseRequestUrl');\n    var parsed = parser && parser(url, this.requestInfoUtils) || this.parseRequestUrl(url);\n    var collectionName = parsed.collectionName;\n    var collection = this.db[collectionName];\n    var reqInfo = {\n      req: req,\n      apiBase: parsed.apiBase,\n      collection: collection,\n      collectionName: collectionName,\n      headers: this.createHeaders({\n        'Content-Type': 'application/json'\n      }),\n      id: this.parseId(collection, collectionName, parsed.id),\n      method: this.getRequestMethod(req),\n      query: parsed.query,\n      resourceUrl: parsed.resourceUrl,\n      url: url,\n      utils: this.requestInfoUtils\n    };\n    var resOptions;\n\n    if (/commands\\/?$/i.test(reqInfo.apiBase)) {\n      return this.commands(reqInfo);\n    }\n\n    var methodInterceptor = this.bind(reqInfo.method);\n\n    if (methodInterceptor) {\n      // InMemoryDbService intercepts this HTTP method.\n      // if interceptor produced a response, return it.\n      // else InMemoryDbService chose not to intercept; continue processing.\n      var interceptorResponse = methodInterceptor(reqInfo);\n\n      if (interceptorResponse) {\n        return interceptorResponse;\n      }\n\n      ;\n    }\n\n    if (this.db[collectionName]) {\n      // request is for a known collection of the InMemoryDbService\n      return this.createResponse$(function () {\n        return _this.collectionHandler(reqInfo);\n      });\n    }\n\n    if (this.config.passThruUnknownUrl) {\n      // unknown collection; pass request thru to a \"real\" backend.\n      return this.getPassThruBackend().handle(req);\n    } // 404 - can't handle this request\n\n\n    resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\n    return this.createResponse$(function () {\n      return resOptions;\n    });\n  };\n  /**\n   * Add configured delay to response observable unless delay === 0\n   */\n\n\n  BackendService.prototype.addDelay = function (response) {\n    var d = this.config.delay;\n    return d === 0 ? response : delayResponse(response, d || 500);\n  };\n  /**\n   * Apply query/search parameters as a filter over the collection\n   * This impl only supports RegExp queries on string properties of the collection\n   * ANDs the conditions together\n   */\n\n\n  BackendService.prototype.applyQuery = function (collection, query) {\n    // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n    var conditions = [];\n    var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n    query.forEach(function (value, name) {\n      value.forEach(function (v) {\n        return conditions.push({\n          name: name,\n          rx: new RegExp(decodeURI(v), caseSensitive)\n        });\n      });\n    });\n    var len = conditions.length;\n\n    if (!len) {\n      return collection;\n    } // AND the RegExp conditions\n\n\n    return collection.filter(function (row) {\n      var ok = true;\n      var i = len;\n\n      while (ok && i) {\n        i -= 1;\n        var cond = conditions[i];\n        ok = cond.rx.test(row[cond.name]);\n      }\n\n      return ok;\n    });\n  };\n  /**\n   * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n   */\n\n\n  BackendService.prototype.bind = function (methodName) {\n    var fn = this.inMemDbService[methodName];\n    return fn ? fn.bind(this.inMemDbService) : undefined;\n  };\n\n  BackendService.prototype.bodify = function (data) {\n    return this.config.dataEncapsulation ? {\n      data: data\n    } : data;\n  };\n\n  BackendService.prototype.clone = function (data) {\n    return JSON.parse(JSON.stringify(data));\n  };\n\n  BackendService.prototype.collectionHandler = function (reqInfo) {\n    // const req = reqInfo.req;\n    var resOptions;\n\n    switch (reqInfo.method) {\n      case 'get':\n        resOptions = this.get(reqInfo);\n        break;\n\n      case 'post':\n        resOptions = this.post(reqInfo);\n        break;\n\n      case 'put':\n        resOptions = this.put(reqInfo);\n        break;\n\n      case 'delete':\n        resOptions = this.delete(reqInfo);\n        break;\n\n      default:\n        resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n        break;\n    } // If `inMemDbService.responseInterceptor` exists, let it morph the response options\n\n\n    var interceptor = this.bind('responseInterceptor');\n    return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\n  };\n  /**\n   * Commands reconfigure the in-memory web api service or extract information from it.\n   * Commands ignore the latency delay and respond ASAP.\n   *\n   * When the last segment of the `apiBase` path is \"commands\",\n   * the `collectionName` is the command.\n   *\n   * Example URLs:\n   *   commands/resetdb (POST) // Reset the \"database\" to its original state\n   *   commands/config (GET)   // Return this service's config object\n   *   commands/config (POST)  // Update the config (e.g. the delay)\n   *\n   * Usage:\n   *   http.post('commands/resetdb', undefined);\n   *   http.get('commands/config');\n   *   http.post('commands/config', '{\"delay\":1000}');\n   */\n\n\n  BackendService.prototype.commands = function (reqInfo) {\n    var _this = this;\n\n    var command = reqInfo.collectionName.toLowerCase();\n    var method = reqInfo.method;\n    var resOptions = {\n      url: reqInfo.url\n    };\n\n    switch (command) {\n      case 'resetdb':\n        resOptions.status = STATUS.NO_CONTENT;\n        return this.resetDb(reqInfo).pipe(concatMap(function () {\n          return _this.createResponse$(function () {\n            return resOptions;\n          }, false\n          /* no latency delay */\n          );\n        }));\n\n      case 'config':\n        if (method === 'get') {\n          resOptions.status = STATUS.OK;\n          resOptions.body = this.clone(this.config); // any other HTTP method is assumed to be a config update\n        } else {\n          var body = this.getJsonBody(reqInfo.req);\n          Object.assign(this.config, body);\n          this.passThruBackend = undefined; // re-create when needed\n\n          resOptions.status = STATUS.NO_CONTENT;\n        }\n\n        break;\n\n      default:\n        resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\n    }\n\n    return this.createResponse$(function () {\n      return resOptions;\n    }, false\n    /* no latency delay */\n    );\n  };\n\n  BackendService.prototype.createErrorResponseOptions = function (url, status, message) {\n    return {\n      body: {\n        error: \"\" + message\n      },\n      url: url,\n      headers: this.createHeaders({\n        'Content-Type': 'application/json'\n      }),\n      status: status\n    };\n  };\n  /**\n   * Create a cold response Observable from a factory for ResponseOptions\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n   * @param withDelay - if true (default), add simulated latency delay from configuration\n   */\n\n\n  BackendService.prototype.createResponse$ = function (resOptionsFactory, withDelay) {\n    if (withDelay === void 0) {\n      withDelay = true;\n    }\n\n    var resOptions$ = this.createResponseOptions$(resOptionsFactory);\n    var resp$ = this.createResponse$fromResponseOptions$(resOptions$);\n    return withDelay ? this.addDelay(resp$) : resp$;\n  };\n  /**\n   * Create a cold Observable of ResponseOptions.\n   * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n   */\n\n\n  BackendService.prototype.createResponseOptions$ = function (resOptionsFactory) {\n    var _this = this;\n\n    return new Observable(function (responseObserver) {\n      var resOptions;\n\n      try {\n        resOptions = resOptionsFactory();\n      } catch (error) {\n        var err = error.message || error;\n        resOptions = _this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\n      }\n\n      var status = resOptions.status;\n\n      try {\n        resOptions.statusText = getStatusText(status);\n      } catch (e) {\n        /* ignore failure */\n      }\n\n      if (isSuccess(status)) {\n        responseObserver.next(resOptions);\n        responseObserver.complete();\n      } else {\n        responseObserver.error(resOptions);\n      }\n\n      return function () {}; // unsubscribe function\n    });\n  };\n\n  BackendService.prototype.delete = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        url = _a.url; // tslint:disable-next-line:triple-equals\n\n    if (id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\n    }\n\n    var exists = this.removeById(collection, id);\n    return {\n      headers: headers,\n      status: exists || !this.config.delete404 ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n    };\n  };\n  /**\n   * Find first instance of item in collection by `item.id`\n   * @param collection\n   * @param id\n   */\n\n\n  BackendService.prototype.findById = function (collection, id) {\n    return collection.find(function (item) {\n      return item.id === id;\n    });\n  };\n  /**\n   * Generate the next available id for item in this collection\n   * Use method from `inMemDbService` if it exists and returns a value,\n   * else delegates to `genIdDefault`.\n   * @param collection - collection of items with `id` key property\n   */\n\n\n  BackendService.prototype.genId = function (collection, collectionName) {\n    var genId = this.bind('genId');\n\n    if (genId) {\n      var id = genId(collection, collectionName); // tslint:disable-next-line:triple-equals\n\n      if (id != undefined) {\n        return id;\n      }\n    }\n\n    return this.genIdDefault(collection, collectionName);\n  };\n  /**\n   * Default generator of the next available id for item in this collection\n   * This default implementation works only for numeric ids.\n   * @param collection - collection of items with `id` key property\n   * @param collectionName - name of the collection\n   */\n\n\n  BackendService.prototype.genIdDefault = function (collection, collectionName) {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      throw new Error(\"Collection '\" + collectionName + \"' id type is non-numeric or unknown. Can only generate numeric ids.\");\n    }\n\n    var maxId = 0;\n    collection.reduce(function (prev, item) {\n      maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n    }, undefined);\n    return maxId + 1;\n  };\n\n  BackendService.prototype.get = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        query = _a.query,\n        url = _a.url;\n    var data = collection; // tslint:disable-next-line:triple-equals\n\n    if (id != undefined && id !== '') {\n      data = this.findById(collection, id);\n    } else if (query) {\n      data = this.applyQuery(collection, query);\n    }\n\n    if (!data) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\n    }\n\n    return {\n      body: this.bodify(this.clone(data)),\n      headers: headers,\n      status: STATUS.OK\n    };\n  };\n  /**\n   * Get location info from a url, even on server where `document` is not defined\n   */\n\n\n  BackendService.prototype.getLocation = function (url) {\n    if (!url.startsWith('http')) {\n      // get the document iff running in browser\n      var doc = typeof document === 'undefined' ? undefined : document; // add host info to url before parsing.  Use a fake host when not in browser.\n\n      var base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\n      url = url.startsWith('/') ? base + url : base + '/' + url;\n    }\n\n    return parseUri(url);\n  };\n\n  ;\n  /**\n   * get or create the function that passes unhandled requests\n   * through to the \"real\" backend.\n   */\n\n  BackendService.prototype.getPassThruBackend = function () {\n    return this.passThruBackend ? this.passThruBackend : this.passThruBackend = this.createPassThruBackend();\n  };\n  /**\n   * Get utility methods from this service instance.\n   * Useful within an HTTP method override\n   */\n\n\n  BackendService.prototype.getRequestInfoUtils = function () {\n    var _this = this;\n\n    return {\n      createResponse$: this.createResponse$.bind(this),\n      findById: this.findById.bind(this),\n      isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\n      getConfig: function () {\n        return _this.config;\n      },\n      getDb: function () {\n        return _this.db;\n      },\n      getJsonBody: this.getJsonBody.bind(this),\n      getLocation: this.getLocation.bind(this),\n      getPassThruBackend: this.getPassThruBackend.bind(this),\n      parseRequestUrl: this.parseRequestUrl.bind(this)\n    };\n  };\n\n  BackendService.prototype.indexOf = function (collection, id) {\n    return collection.findIndex(function (item) {\n      return item.id === id;\n    });\n  };\n  /** Parse the id as a number. Return original value if not a number. */\n\n\n  BackendService.prototype.parseId = function (collection, collectionName, id) {\n    if (!this.isCollectionIdNumeric(collection, collectionName)) {\n      // Can't confirm that `id` is a numeric type; don't parse as a number\n      // or else `'42'` -> `42` and _get by id_ fails.\n      return id;\n    }\n\n    var idNum = parseFloat(id);\n    return isNaN(idNum) ? id : idNum;\n  };\n  /**\n   * return true if can determine that the collection's `item.id` is a number\n   * This implementation can't tell if the collection is empty so it assumes NO\n   * */\n\n\n  BackendService.prototype.isCollectionIdNumeric = function (collection, collectionName) {\n    // collectionName not used now but override might maintain collection type information\n    // so that it could know the type of the `id` even when the collection is empty.\n    return !!(collection && collection[0]) && typeof collection[0].id === 'number';\n  };\n  /**\n   * Parses the request URL into a `ParsedRequestUrl` object.\n   * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n   *\n   * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n   *   When apiBase=undefined and url='http://localhost/api/collection/42'\n   *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n   *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n   *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n   *   When apiBase='/' and url='http://localhost/collection'\n   *     {base: '/', collectionName: 'collection', id: undefined, ...}\n   *\n   * The actual api base segment values are ignored. Only the number of segments matters.\n   * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n   *\n   * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n   */\n\n\n  BackendService.prototype.parseRequestUrl = function (url) {\n    try {\n      var loc = this.getLocation(url);\n      var drop = this.config.rootPath.length;\n      var urlRoot = '';\n\n      if (loc.host !== this.config.host) {\n        // url for a server on a different host!\n        // assume it's collection is actually here too.\n        drop = 1; // the leading slash\n\n        urlRoot = loc.protocol + '//' + loc.host + '/';\n      }\n\n      var path = loc.path.substring(drop);\n      var pathSegments = path.split('/');\n      var segmentIx = 0; // apiBase: the front part of the path devoted to getting to the api route\n      // Assumes first path segment if no config.apiBase\n      // else ignores as many path segments as are in config.apiBase\n      // Does NOT care what the api base chars actually are.\n\n      var apiBase = void 0; // tslint:disable-next-line:triple-equals\n\n      if (this.config.apiBase == undefined) {\n        apiBase = pathSegments[segmentIx++];\n      } else {\n        apiBase = removeTrailingSlash(this.config.apiBase.trim());\n\n        if (apiBase) {\n          segmentIx = apiBase.split('/').length;\n        } else {\n          segmentIx = 0; // no api base at all; unwise but allowed.\n        }\n      }\n\n      apiBase += '/';\n      var collectionName = pathSegments[segmentIx++]; // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\n\n      collectionName = collectionName && collectionName.split('.')[0];\n      var id = pathSegments[segmentIx++];\n      var query = this.createQueryMap(loc.query);\n      var resourceUrl = urlRoot + apiBase + collectionName + '/';\n      return {\n        apiBase: apiBase,\n        collectionName: collectionName,\n        id: id,\n        query: query,\n        resourceUrl: resourceUrl\n      };\n    } catch (err) {\n      var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\n      throw new Error(msg);\n    }\n  }; // Create entity\n  // Can update an existing entity too if post409 is false.\n\n\n  BackendService.prototype.post = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        req = _a.req,\n        resourceUrl = _a.resourceUrl,\n        url = _a.url;\n    var item = this.clone(this.getJsonBody(req)); // tslint:disable-next-line:triple-equals\n\n    if (item.id == undefined) {\n      try {\n        item.id = id || this.genId(collection, collectionName);\n      } catch (err) {\n        var emsg = err.message || '';\n\n        if (/id type is non-numeric/.test(emsg)) {\n          return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\n        } else {\n          console.error(err);\n          return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR, \"Failed to generate new id for '\" + collectionName + \"'\");\n        }\n      }\n    }\n\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request id does not match item.id\");\n    } else {\n      id = item.id;\n    }\n\n    var existingIx = this.indexOf(collection, id);\n    var body = this.bodify(item);\n\n    if (existingIx === -1) {\n      collection.push(item);\n      headers.set('Location', resourceUrl + '/' + id);\n      return {\n        headers: headers,\n        body: body,\n        status: STATUS.CREATED\n      };\n    } else if (this.config.post409) {\n      return this.createErrorResponseOptions(url, STATUS.CONFLICT, \"'\" + collectionName + \"' item with id='\" + id + \" exists and may not be updated with POST; use PUT instead.\");\n    } else {\n      collection[existingIx] = item;\n      return this.config.post204 ? {\n        headers: headers,\n        status: STATUS.NO_CONTENT\n      } : // successful; no content\n      {\n        headers: headers,\n        body: body,\n        status: STATUS.OK\n      }; // successful; return entity\n    }\n  }; // Update existing entity\n  // Can create an entity too if put404 is false.\n\n\n  BackendService.prototype.put = function (_a) {\n    var collection = _a.collection,\n        collectionName = _a.collectionName,\n        headers = _a.headers,\n        id = _a.id,\n        req = _a.req,\n        url = _a.url;\n    var item = this.clone(this.getJsonBody(req)); // tslint:disable-next-line:triple-equals\n\n    if (item.id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\n    }\n\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request for '\" + collectionName + \"' id does not match item.id\");\n    } else {\n      id = item.id;\n    }\n\n    var existingIx = this.indexOf(collection, id);\n    var body = this.bodify(item);\n\n    if (existingIx > -1) {\n      collection[existingIx] = item;\n      return this.config.put204 ? {\n        headers: headers,\n        status: STATUS.NO_CONTENT\n      } : // successful; no content\n      {\n        headers: headers,\n        body: body,\n        status: STATUS.OK\n      }; // successful; return entity\n    } else if (this.config.put404) {\n      // item to update not found; use POST to create new item for this id.\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' item with id='\" + id + \" not found and may not be created with PUT; use POST instead.\");\n    } else {\n      // create new item for id not found\n      collection.push(item);\n      return {\n        headers: headers,\n        body: body,\n        status: STATUS.CREATED\n      };\n    }\n  };\n\n  BackendService.prototype.removeById = function (collection, id) {\n    var ix = this.indexOf(collection, id);\n\n    if (ix > -1) {\n      collection.splice(ix, 1);\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Tell your in-mem \"database\" to reset.\n   * returns Observable of the database because resetting it could be async\n   */\n\n\n  BackendService.prototype.resetDb = function (reqInfo) {\n    var _this = this;\n\n    this.dbReadySubject.next(false);\n    var db = this.inMemDbService.createDb(reqInfo);\n    var db$ = db instanceof Observable ? db : typeof db.then === 'function' ? from(db) : of(db);\n    db$.pipe(first()).subscribe(function (d) {\n      _this.db = d;\n\n      _this.dbReadySubject.next(true);\n    });\n    return this.dbReady;\n  };\n\n  return BackendService;\n}();\n\nexport { BackendService }; //# sourceMappingURL=backend.service.js.map","map":null,"metadata":{},"sourceType":"module"}